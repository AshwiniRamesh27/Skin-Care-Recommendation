# -*- coding: utf-8 -*-
"""Simple Skin Care Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EPNt8PlBip7Kfss7wsaXrARvxEk7k23n
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
taniadh_skin_care_path = kagglehub.dataset_download('taniadh/skin-care')

print('Data source import complete.')

"""This project used for GenAI Competition. Created by Dennis Tandelon. <br>
**This project leverages three key capabilities of Generative AI:**
Image Understanding, Few-Shot Prompting, and Retrieval-Augmented Generation (RAG).

**The workflow is as follows:**
The user uploads an image of their face. The system analyzes the image to identify potential skin concerns, then formulates a prompt using Few-Shot learning techniques. It also retrieves relevant information from a curated skincare knowledge base to support the response. Combining this information, the Generative AI model generates a personalized skincare recommendation for the user.

# Setup
First, Install the Gemini API Python SDK. <br>
Next, Setup your gemini api secret key.
"""

!pip uninstall -qqy jupyterlab kfp  # Remove unused conflicting packages
!pip install -qU "google-genai==1.7.0"

from google import genai
from google.genai import types

from IPython.display import Markdown

# Checking for SDK Version
genai.__version__

with open('/content/API.txt', 'r') as file:
    GOOGLE_API_KEY = file.read().strip()

client = genai.Client(api_key=GOOGLE_API_KEY)

# checking for available model
for m in client.models.list():
    print(m.name)

"""# Face Image Understanding
This step require user to input image, then the model will try to understand the user skin concern. Result on the description of the skin type and details in the image. The result of this step will be used to generate more personalize skin care recommendation on the next steps.I will use example photo i got from searching on google.
"""

from IPython.display import display
import ipywidgets as widgets

# This is the button to upload image
upload = widgets.FileUpload(
    accept='image/*',
    multiple=False,
    description='Upload Image'
)

display(upload)

# Uploaded image detail
from pprint import pprint

pprint(upload.value)

from IPython.display import Image as IPyImage

# Take look on the image we have uploaded
image_data = upload.value['__results___9_0.png']['content']
display(IPyImage(data=image_data))

def analyze_skin_image(image_bytes):
    """
    Analyzes a facial image to infer skin type and common skin issues.

    This function sends the uploaded image to the Gemini model along with a natural language prompt.
    The model returns an analysis describing the skin type (e.g., oily, dry, sensitive) and visible concerns
    (e.g., acne, redness, dullness). It also suggests a simplified skin label such as 'dry-sensitive' or 'oily-acne',
    which can later be used for skincare product matching via RAG.

    Args:
        image_bytes (bytes): The raw image data (as bytes), typically from a FileUpload widget.

    Returns:
        str: A text-based analysis result from Gemini, including the inferred skin label.
    """

    # Compose prompt
    prompt = "Analyze this face and describe the skin type and problems. Suggest a label like 'dry-sensitive', 'oily-acne', etc."

    # Generate response
    response = client.models.generate_content(
        model='models/gemini-2.5-flash-lite',
        contents = [
            prompt,
            types.Part.from_bytes(data=bytes(image_bytes), mime_type='image/jpeg'),
        ],
    )

    return response.text

desc_result = analyze_skin_image(image_data)
Markdown(desc_result)

"""# Searching for skin care solution and recommendation
From the data extracted from the image, this notebook will combine the rag method with fewshot prompting to provide a skin care product recommendation.

#### Data for RAG
Using the data from kaggle's public dataset. 'Check input for more detail about the dataset used. Before using it into RAG, we will do a little bit data cleansing and feature selection here.
"""

# Checking for skin care product data. This is not promotion of any product below, just example could found for how this recommendation works.
import pandas as pd

data = pd.read_csv('/content/productlist.csv')
data.head()

# Removing unnecessary columns
data = data.drop(columns=['Unnamed: 0', 'product_ID', 'price'])
data.head()

# Checking for data detail
data.info()

"""#### Setting Up RAG (Retrieval-Augmented Generation)
**Keyword Extraction using Gemini** <br>
We use the Gemini model to extract relevant keywords based on the user’s skin type, skin concerns, or goals (e.g., "acne-prone", "hydrating", "oil-control"). This simplifies the search process by letting the model guide what to look for. <br>

**Filtering the Skincare Product Dataset** <br>
Once keywords are generated, we filter the skincare product dataset using these keywords to retrieve the most relevant products. This acts as the retrieval phase of RAG — narrowing down the product choices based on user needs. <br>

**Formatting for Prompt Injection**<br>
The retrieved product information is then formatted into readable strings, which are inserted into a prompt. This enriched context helps Gemini generate a routine grounded in real product data — completing the "Augmented Generation" phase. <br>
"""

def generate_keyword(description):
    """
    Generates a set of skincare-related keywords based on a user-provided skin description.

    This function uses the Gemini model to extract relevant keywords from a user's
    skin condition or concern description. The output keywords are used to filter
    a skincare product dataset in a RAG (Retrieval-Augmented Generation) setup.

    Args:
        description (str): A text description of the user's skin type, concern, or goals.

    Returns:
        str: A pipe-separated string of at least 5 relevant keywords (e.g., "acne|oily|pore|hydrating|repair").
    """

    # Compose prompt
    prompt = f"""
        Base on this description: {description}, generate keyword used to find related skin care product.
        Example: keywords = acne|oily|exfoliate|pore|sebum|oil-control

        Separate each keyword with pipe. Return only keywords, with minimum 5 keyword"""

    # Generate response
    response = client.models.generate_content(
        model='models/gemini-2.5-flash-lite',
        contents = [
            prompt
        ],
    )

    return response.text

keywords = generate_keyword(desc_result)
print(keywords)

# Filter rows where any keyword appears in the description (case-insensitive)
rag_df = data[data['product_description'].str.contains(keywords, case=False)]

# Combine into readable strings
retrieved_info = "\n".join([
    f"{row['product_type']}: {row['product_name']} by {row['product_brand']} – {row['product_description']}"
    for _, row in rag_df.iterrows()
])

print(f"Example of the result:\n{retrieved_info[:1000]}...")

"""### Fewshot prompting
Function below acts as the final generative step in the skincare recommendation pipeline. It combines:
* Few-shot examples to guide Gemini in generating routines with consistent structure and tone.
* User-specific skin type information (from manual input or image analysis).
* Retrieved product data (filtered via RAG from a skincare database).

"""

def skin_care_recommendation(desc_result, retrieved_info):
    """
    Generates a personalized skincare routine using few-shot prompting and retrieved product data.

    The model is instructed to use only the retrieved products to construct an AM/PM skincare routine.

    Args:
        desc_result (str): The user's skin type and concern analysis (e.g., "Skin type: oily-acne").
        retrieved_info (str): A list or description of matched skincare products from the dataset.

    Returns:
        str: A structured skincare routine text generated by the Gemini model.
    """

    fewshot_examples = """
    Example 1:
    Skin Type: dry-sensitive
    Routine:
    - Cleanser: Gentle Milk Cleanser
    - Toner: Hada Labo Gokujyun Lotion
    - Serum: Hydrating Hyaluronic Serum
    - Moisturizer: Cerave Moisturizing Cream
    - Sunscreen: La Roche-Posay Anthelios

    Example 2:
    Skin Type: oily-acne
    Routine:
    - Cleanser: Oil-control gel cleanser
    - Toner: Some By Mi AHA BHA PHA
    - Serum: Skintific 2% Salicylic Acid
    - Moisturizer: Lightweight water-based gel
    - Sunscreen: Azarine Hydrasoothe
    """

    prompt = f""" You are a skincare expert.
    Based on the user's skin type and product knowledge base, generate a personalized routine.
    {fewshot_examples}

    User detail : {desc_result}
    Recommended Products:
    {retrieved_info}

    Now generate a full skincare routine using only the recommended products.
    """

    response = client.models.generate_content(
        model='models/gemini-2.5-flash-lite',
        contents = [
            prompt
        ],
    )

    return response.text

# Here come the result
Markdown(skin_care_recommendation(desc_result, retrieved_info))

